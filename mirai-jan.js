const axios = require("axios");

module.exports.config = {
  name: "jan",
  version: "1.4.1",
  author: "Aminulsordar",
  countDown: 0,
  role: 0,
  aliases: ["jaan", "janu", "bby"],
  category: "jan",
  shortDescription: {
    en: "Jan AI chatbot",
    bn: "Jan AI ржЪрзНржпрж╛ржЯржмржЯ",
    vi: "Jan AI chatbot",
    ar: "╪▒┘И╪и┘И╪к Jan AI"
  },
  longDescription: {
    en: "Jan AI that can learn and answer questions",
    bn: "Jan AI ржмржЯ ржпрзЗржЯрж╛ рж╢рзЗржЦрж╛ржирзЛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ ржПржмржВ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░рзЗред",
    vi: "Jan AI c├│ thс╗Г hс╗Нc v├а trс║г lс╗Эi c├вu hс╗Пi",
    ar: "╪▒┘И╪и┘И╪к Jan AI ┘К┘Е┘Г┘Ж┘З ╪з┘Д╪к╪╣┘Д┘Е ┘И╪з┘Д╪е╪м╪з╪и╪й ╪╣┘Д┘Й ╪з┘Д╪г╪│╪ж┘Д╪й"
  },
  guide: {
    en: "{pn} <message>\n{pn} teach <question> - <answer>\n{pn} count",
    bn: "{pn} <ржмрж╛рж░рзНрждрж╛>\n{pn} teach <ржкрзНрж░рж╢рзНржи> - <ржЙрждрзНрждрж░>\n{pn} count",
    vi: "{pn} <tin nhс║пn>\n{pn} teach <c├вu hс╗Пi> - <c├вu trс║г lс╗Эi>\n{pn} count",
    ar: "{pn} <╪▒╪│╪з┘Д╪й>\n{pn} teach <╪│╪д╪з┘Д> - <╪е╪м╪з╪и╪й>\n{pn} count"
  }
};

// ===== Helper functions =====
async function fetchCount() {
  try {
    const res = await axios.get(`https://jan-api-by-aminul-sordar.vercel.app/count`);
    return res.data;
  } catch (e) {
    console.error("fetchCount error:", e.message);
    return { questions: 0, answers: 0 };
  }
}

async function getAnswer(question) {
  try {
    const res = await axios.get(`https://jan-api-by-aminul-sordar.vercel.app/answer/${encodeURIComponent(question)}`);
    return res.data.answer || "тЭМ ржЖржорж┐ ржПржЦржирзЛ ржПржЯрж╛ рж╢рж┐ржЦрж┐ржирж┐, ржжрзЯрж╛ ржХрж░рзЗ ржЖржорж╛ржХрзЗ рж╢рзЗржЦрж╛ржи! ЁЯСА";
  } catch (e) {
    console.error("getAnswer error:", e.message);
    return "тЭМ рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржЙрждрзНрждрж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐, ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи!";
  }
}

async function teachMultiple(qaText) {
  try {
    const res = await axios.post(`https://jan-api-by-aminul-sordar.vercel.app/teach`, { text: qaText });
    return res.data.message;
  } catch (e) {
    console.error("teachMultiple error:", e.message);
    return "тЭМ рж╢рзЗржЦрж╛ржирзЛ ржмрзНржпрж░рзНрже рж╣рзЯрзЗржЫрзЗ! рж╕рж╛рж░рзНржнрж╛рж░ рж╕ржорж╕рзНржпрж╛ рж╣рждрзЗ ржкрж╛рж░рзЗред";
  }
}

// ===== Mirai event handlers =====
module.exports.handleReply = async function ({ api, event, handleReply }) {
  const reply = event.body.trim();
  const responseMessage = await getAnswer(reply);

  return api.sendMessage(responseMessage, event.threadID, (err, info) => {
    if (!err) {
      global.client.handleReply.push({
        name: this.config.name,
        type: "reply",
        messageID: info.messageID,
        author: event.senderID
      });
    }
  }, event.messageID);
};

module.exports.handleEvent = async function ({ api, event }) {
  try {
    const body = event.body ? event.body.toLowerCase().trim() : "";
    const prefixes = ["baby", "bby", "bot", "jan", "babu", "janu"];
    const startsWithPrefix = prefixes.find(prefix => body.startsWith(prefix));

    if (startsWithPrefix) {
      const question = body.replace(/^\S+\s*/, "").trim();

      if (question.length > 0) {
        const response = await getAnswer(body);
        return api.sendMessage(response, event.threadID, (err, info) => {
          if (!err) {
            global.client.handleReply.push({
              name: this.config.name,
              type: "reply",
              messageID: info.messageID,
              author: event.senderID
            });
          }
        }, event.messageID);
      }

      const randomReplies = [
        "рж╣рзНржпрж╛ржБ ЁЯША, ржЖржорж┐ ржПржЦрж╛ржирзЗ ржЖржЫрж┐",
        "ржХрзЗржоржи ржЖржЫрзЛ?",
        "ржмрж▓рзЛ ржЬрж╛ржи ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ рждрзЛржорж╛рж░ ржЬржирзНржп",
        `рждрзБржорж┐ ржмрж▓рзЗржЫрзЛ: "${body}"? ржХрж┐ржЙржЯ!`,
        "I love you ЁЯТЭ",
        "ржнрж╛рж▓рзЛржмрж╛рж╕рж┐ рждрзЛржорж╛ржХрзЗ ЁЯдЦ",
        "Hi, I'm messenger Bot, I can help you.?ЁЯдЦ",
        "Use callad to contact admin!",
        "Hi, Don't disturb ЁЯдЦ ЁЯЪШ Now I'm going to Feni, Bangladesh..bye",
        "Hi, ЁЯдЦ I can help you~~~~",
        "ржЖржорж┐ ржПржЦржи ржЖржорж┐ржирзБрж▓ ржмрж╕рзЗрж░ рж╕рж╛ржерзЗ ржмрж┐ржЬрж┐ ржЖржЫрж┐",
        "ржЖржорж╛ржХрзЗ ржЖржорж╛ржХрзЗ ржирж╛ ржбрзЗржХрзЗ ржЖржорж╛рж░ ржмрж╕ржХрзЗ ржбрж╛ржХрзЛ ржПржЗ ржирзЗржУ LINK :- https://www.facebook.com/100071880593545",
        "Hmmm sona ЁЯЦд meye hoile kule aso ar sele hoile kule new ЁЯлВЁЯШШ",
        "Yah This Bot creator : PRINCE RID((A.R))     link => https://www.facebook.com/100071880593545",
        "рж╣рж╛ ржмрж▓рзЛ, рж╢рзБржиржЫрж┐ ржЖржорж┐ ЁЯд╕тАНтЩВя╕ПЁЯлВ",
        "Ato daktasen kn bujhlam na ЁЯШб",
        "jan bal falaba,ЁЯЩВ",
        "ask amr mon vlo nei dakben naЁЯЩВ",
        "Hmm jan ummahЁЯШШЁЯШШ",
        "jang hanga korba ЁЯЩВЁЯЦд",
        "iss ato dako keno lojja lage to ЁЯлжЁЯЩИ",
        "suna tomare amar valo lage,ЁЯЩИЁЯШ╜"
      ];

      const reply = randomReplies[Math.floor(Math.random() * randomReplies.length)];
      return api.sendMessage(reply, event.threadID, (err, info) => {
        if (!err) {
          global.client.handleReply.push({
            name: this.config.name,
            type: "reply",
            messageID: info.messageID,
            author: event.senderID
          });
        }
      }, event.messageID);
    }
  } catch (e) {
    console.error("handleEvent error:", e.message);
  }
};

module.exports.run = async function ({ api, event, args }) {
  if (args.length < 1) {
    return api.sendMessage("тЭМ ржжрзЯрж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи!", event.threadID, event.messageID);
  }

  const command = args[0].toLowerCase();

  // Count
  if (command === "count") {
    const count = await fetchCount();
    return api.sendMessage(
      `ЁЯУК ржЬрзНржЮрж╛ржиржнрж╛ржгрзНржбрж╛рж░:\n\n` +
      `ЁЯУМ ржорзЛржЯ ржкрзНрж░рж╢рзНржи: ${count.questions}\n` +
      `ЁЯУМ ржорзЛржЯ ржЙрждрзНрждрж░: ${count.answers}\n\n` +
      `ЁЯТб ржЖржорж╛ржХрзЗ ржЖрж░ржУ рж╢рзЗржЦрж╛ржирзЛрж░ ржорж╛ржзрзНржпржорзЗ ржЖржорж╛ржХрзЗ ржЖрж░ржУ рж╕рзНржорж╛рж░рзНржЯ ржмрж╛ржирж╛ржи!\n` +
      `ЁЯФН ржХрж┐ржЫрзБ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи, ржЖржорж┐ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржм ржЙрждрзНрждрж░ ржжрзЗржУрзЯрж╛рж░!`,
      event.threadID, event.messageID
    );
  }

  // Teach
  if (command === "teach") {
    const input = args.slice(1).join(" ").trim();
    if (!input.includes(" - ")) {
      return api.sendMessage(
        "тЭМ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:\n/teach ржкрзНрж░рж╢рзНржи - ржЙрждрзНрждрж░\n\nржПржХрж╛ржзрж┐ржХ ржкрзНрж░рж╢рзНржи ржжрж┐рждрзЗ ржЪрж╛ржЗрж▓рзЗ '|' ржжрж┐рзЯрзЗ ржЖрж▓рж╛ржжрж╛ ржХрж░рзБржиред",
        event.threadID, event.messageID
      );
    }

    const message = await teachMultiple(input);
    return api.sendMessage(message, event.threadID, event.messageID);
  }

  // Ask
  const input = args.join(" ").trim();
  const responseMessage = await getAnswer(input);

  return api.sendMessage(responseMessage, event.threadID, (err, info) => {
    if (!err) {
      global.client.handleReply.push({
        name: this.config.name,
        type: "reply",
        messageID: info.messageID,
        author: event.senderID
      });
    }
  }, event.messageID);
};
